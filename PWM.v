`timescale 1s / 1s
/*
https://digilent.com/reference/basys3/refmanual
^
Please refer to above for hardware specifications



The point of Pulse Width Modulation is to control analog devices with digital outputs.
In the case of our project the analog device is the GAN Mosfets while the digital output
is the frequency generated by the PWM set by the FPGA

Realistically what happens is that it turns the power on and off in such a way that
we can simulate a sine wave of power

The code written below is parameterized such that we can modify it for faster switching 
frequencies in the future without having to rewrite the main logic of the code

Assumptions that are made that aren't explained in the code :
    1. The maximum oscillator output is 100Mhz, and thus the output speed of the PWM will be a portion of this speed
    2. The clock speed of the Basys3 has a maximum speed of 464Mhz
    3. Oscillator pin is W5 on the Basys3 Board (See .xdc file for more information)
    
Calculations for PWM Code :
    Maximum clock speed = 100Mhz
    Desired clock speed = FREQUENCY
        *Using an example desired Frequency of 500Khz
        
        100Mhz / 500Khz = 200
        Thus we need to slow down the clock by a factor of 200
        
Period desired for 500Khz is 2000ns   
    Period for a digital signal is rising edge to rising edge

Duty Cycle of PWM  = PW / T
PW : Pulse Width of Signal
T : 1 / Frequency

*/


module SLOW_CLK(     input clk,
                //input reset,
                //input increase,
                //input decrease,
                //output PWMOut 
                 output slwCLK);
                
parameter FREQUENCY = 100_000; //This is the frequency desired, 500K -> 500,000 use all zeros to represent hz
parameter CLK_FREQUENCY = 100_000_000; //This is the Basys3 clock frequency, DO NOT EDIT
parameter SLOW_DOWN = CLK_FREQUENCY / FREQUENCY;
                
 reg slow_clk;
 reg[0 : 31] counter = 32'd0;
 reg[0: 31] SlowFactor = (SLOW_DOWN * 10) / 4; //This is the factor of how much we need to slow down the clock or # of steps
 /*
 
    Slow down factor is calculated as (Clock Frequency / Frequency) * Correlation
    100Mhz is 1 Nanoseconds
    500Khz is 2 Nanoseconds
    400Khz is 2.5 Nanoseconds
    200Khz is 5 Nanoseconds
    100Khz is 10 Nanoseconds
    
    This makes the correlation 2.5
    (Counter updates on negative edge of the cycle)
 
 */

 
 always @(negedge clk) begin
 
 if(counter >= SlowFactor) begin
    counter = 32'd1;
    slow_clk = 1'b1;
 end
 else begin
    counter <= counter + 32'd1;
    slow_clk <= 1'b0;
 end
 
 end
    
    assign slwCLK = slow_clk;            
             
endmodule


module PWM( input clk,
                output PWM);
                
reg PWM_Driver = 0;
                
    always @(posedge clk) begin
       PWM_Driver = ~PWM_Driver;
    end            
    
    
    assign PWM = PWM_Driver;        
                
endmodule
